/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   args_validation.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mtarento <mtarento@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 21:06:36 by mtarento          #+#    #+#             */
/*   Updated: 2025/03/06 23:36:56 by mtarento         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

int	is_digit(char c)
{
	return (c >= '0' && c <= '9');
}

int	only_digit(char *av[])
{
	int	i;
	int	j;

	i = 1;
	j = 0;
	while (av[i])
	{
		j = 0;
		while (av[i][j])
		{
			if (!is_digit(av[i][j]))
				return (0);
			j++;
		}
		i++;
	}
	return (1);
}

int	check_args(int ac, char *av[])
{
	if (ac != 5 && ac != 6)
	{
		write(1, "wrong number of args\n", 21);
		return (1);
	}
	if (!only_digit(av))
	{
		printf("arguments must be only digits and positive\n");
		return (1);
	}
	if (ft_atoi(av[1]) <= 0 || ft_atoi(av[2]) <= 0
		|| ft_atoi(av[3]) <= 0 || ft_atoi(av[4]) <= 0)
	{
		printf("args at zero");
		return (1);
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mtarento <mtarento@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 00:44:06 by mtarento          #+#    #+#             */
/*   Updated: 2025/03/07 00:38:14 by mtarento         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

t_table	init_table(int ac, char *av[])
{
	t_table	table;	

	table.num_philos = ft_atoi(av[1]);
	table.time_to_die = ft_atoi(av[2]);
	table.time_to_eat = ft_atoi(av[3]);
	table.time_to_sleep = ft_atoi(av[4]);
	if (ac == 6)
		table.must_eat = ft_atoi(av[5]);
	else
		table.must_eat = -1;
	table.start_time = get_time();
	table.dead = 0;
	return (table);
}

void	init_mutex(t_table *table)
{
	int	i;

	table->forks = malloc(sizeof(pthread_mutex_t) * table->num_philos);
	table->philos = malloc(sizeof(t_philo) * table->num_philos);
	i = 0;
	while (i < table->num_philos)
	{
		pthread_mutex_init(&table->forks[i], NULL);
		pthread_mutex_init(&table->philos[i].meal_mutex, NULL);
		table->philos[i].id = i;
		table->philos[i].table = table;
		table->philos[i].last_meal = table->start_time;
		table->philos[i].meals_eaten = 0;
		table->philos[i].left_fork = &table->forks[i];
		table->philos[i].right_fork
			= &table->forks[(i + 1) % table->num_philos];
		i++;
	}
	pthread_mutex_init(&table->can_print, NULL);
	pthread_mutex_init(&table->finished_mutex, NULL);
	pthread_mutex_init(&table->is_dead, NULL);
}

void	destroy_mutex(t_table *table)
{
	int	i;

	i = 0;
	while (i < table->num_philos)
	{
		pthread_mutex_destroy(&table->forks[i]);
		pthread_mutex_destroy(&table->philos[i].meal_mutex);
		i++;
	}
	pthread_mutex_destroy(&table->can_print);
	pthread_mutex_destroy(&table->is_dead);
	pthread_mutex_destroy(&table->finished_mutex);
	free(table->forks);
	free(table->philos);
	return ;
}

void	create_threads(t_table *table)
{
	int	i;

	i = 0;
	while (i < table->num_philos)
	{
		if (pthread_create(&table->philos[i].thread, NULL,
				philosopher_routine, &table->philos[i]) != 0)
		{
			write(1, "failed creating thread\n", 23);
			return ;
		}
		i++;
	}
	start_monitoring(table);
	i = 0;
	while (i < table->num_philos)
	{
		pthread_join(table->philos[i].thread, NULL);
		i++;
	}
	pthread_join(table->monitor_thread, NULL);
}

int	main(int ac, char *av[])
{
	long	n;
	t_table	table;

	if (check_args(ac, av))
	{
		return (1);
	}
	if (ft_atoi(av[1]) == 1)
	{
		printf("0 Philosopher 0 has taken a fork\n");
		n = get_time();
		usleep(ft_atoi(av[2]) * 1000);
		printf("%ld Philosopher 0 has died \n", get_time() - n);
		return (0);
	}
	table = init_table(ac, av);
	init_mutex(&table);
	create_threads(&table);
	destroy_mutex(&table);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   monitoring.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mtarento <mtarento@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 04:43:09 by mtarento          #+#    #+#             */
/*   Updated: 2025/03/06 23:47:02 by mtarento         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

void	start_monitoring(t_table *table)
{
	if (pthread_create(&table->monitor_thread,
			NULL, monitor_routine, table) != 0)
	{
		write(1, "failed creating monitor thread\n", 32);
		exit(1);
	}
}

void	ft_grave(t_table *table, int id)
{
	pthread_mutex_lock(&table->is_dead);
	table->dead = 1;
	pthread_mutex_unlock(&table->is_dead);
	print_status(&table->philos[id], DEAD);
}

int	check_philosopher_death(t_table *table)
{
	int		i;
	long	time_since_last_meal;

	i = 0;
	while (i < table->num_philos)
	{
		pthread_mutex_lock(&table->philos[i].meal_mutex);
		time_since_last_meal = get_time() - table->philos[i].last_meal;
		pthread_mutex_unlock(&table->philos[i].meal_mutex);
		if (time_since_last_meal >= table->time_to_die)
		{
			ft_grave(table, i);
			return (1);
		}
		i++;
	}
	return (0);
}

int	are_you_done_yet(t_table *table)
{
	int	i;
	int	done_philo;

	i = 0;
	done_philo = 0;
	if (table->must_eat <= 0)
		return (0);
	while (i < table->num_philos)
	{
		pthread_mutex_lock(&table->philos[i].meal_mutex);
		if (table->philos[i].meals_eaten >= table->must_eat)
			done_philo++;
		pthread_mutex_unlock(&table->philos[i].meal_mutex);
		i++;
	}
	if (done_philo == table->num_philos)
	{
		pthread_mutex_lock(&table->is_dead);
		table->dead = 1;
		pthread_mutex_unlock(&table->is_dead);
		return (1);
	}
	return (0);
}

void	*monitor_routine(void *arg)
{
	t_table	*table;

	table = (t_table *)arg;
	while (1)
	{
		pthread_mutex_lock(&table->is_dead);
		if (table->dead)
		{
			pthread_mutex_unlock(&table->is_dead);
			return (NULL);
		}
		pthread_mutex_unlock(&table->is_dead);
		if (check_philosopher_death(table) || are_you_done_yet(table))
			return (NULL);
		ft_usleep(100);
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   philo_routine.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mtarento <mtarento@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/03 21:34:03 by mtarento          #+#    #+#             */
/*   Updated: 2025/03/06 23:35:34 by mtarento         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

void	take_forks(t_philo *philo)
{
	if (philo->id % 2 == 0)
	{
		ft_usleep(100);
		pthread_mutex_lock(philo->left_fork);
		print_status(philo, TAKEN_FORK);
		pthread_mutex_lock(philo->right_fork);
		print_status(philo, TAKEN_FORK);
	}
	else
	{
		pthread_mutex_lock(philo->right_fork);
		print_status(philo, TAKEN_FORK);
		pthread_mutex_lock(philo->left_fork);
		print_status(philo, TAKEN_FORK);
	}
}

void	release_forks(t_philo *philo)
{
	if (philo->id % 2 == 0)
	{
		pthread_mutex_unlock(philo->left_fork);
		pthread_mutex_unlock(philo->right_fork);
	}
	else
	{
		pthread_mutex_unlock(philo->right_fork);
		pthread_mutex_unlock(philo->left_fork);
	}
}

void	sleep_and_think(t_philo *philo)
{
	print_status(philo, SLEEPING);
	ft_usleep(philo->table->time_to_sleep);
	print_status(philo, THINKING);
}

void	eat(t_philo *philo)
{
	take_forks(philo);
	print_status(philo, EATING);
	pthread_mutex_lock(&philo->meal_mutex);
	philo->last_meal = get_time();
	philo->meals_eaten++;
	pthread_mutex_unlock(&philo->meal_mutex);
	ft_usleep(philo->table->time_to_eat);
	release_forks(philo);
}

void	*philosopher_routine(void *arg)
{
	t_philo	*philo;

	philo = (t_philo *)arg;
	while (1)
	{
		pthread_mutex_lock(&philo->table->is_dead);
		if (philo->table->dead)
		{
			pthread_mutex_unlock(&philo->table->is_dead);
			return (NULL);
		}
		pthread_mutex_unlock(&philo->table->is_dead);
		eat(philo);
		sleep_and_think(philo);
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   philo_utils.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mtarento <mtarento@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 00:59:30 by mtarento          #+#    #+#             */
/*   Updated: 2025/03/06 23:36:20 by mtarento         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

long	get_time(void)
{
	struct timeval	tv;

	gettimeofday(&tv, NULL);
	return (tv.tv_sec * 1000 + tv.tv_usec / 1000);
}

int	ft_atoi(char *str)
{
	int	sign;
	int	num;
	int	i;

	i = 0;
	sign = 1;
	num = 0;
	while (str[i] <= ' ')
		i++;
	if (str[i] == '-' || str[i] == '+')
	{
		if (str[i] == '-')
		{
			sign *= -1;
		}
		i++;
	}
	while (str[i] >= '0' && str[i] <= '9')
	{
		num = num * 10 + (str[i] - 48);
		i++;
	}
	return (num * sign);
}

void	print_status(t_philo *philo, t_action action)
{
	long	timestamp;	

	pthread_mutex_lock(&philo->table->is_dead);
	if (philo->table->dead && action != DEAD)
	{
		pthread_mutex_unlock(&philo->table->is_dead);
		return ;
	}
	pthread_mutex_unlock(&philo->table->is_dead);
	pthread_mutex_lock(&philo->table->can_print);
	timestamp = get_time() - philo->table->start_time;
	if (action == TAKEN_FORK)
		printf("%ld Philosopher %d has taken a fork\n", timestamp, philo->id);
	else if (action == EATING)
		printf("%ld Philosopher %d is eating\n", timestamp, philo->id);
	else if (action == SLEEPING)
		printf("%ld Philosopher %d is sleeping\n", timestamp, philo->id);
	else if (action == THINKING)
		printf("%ld Philosopher %d is thinking\n", timestamp, philo->id);
	else if (action == DEAD)
		printf("%ld Philosopher %d has died \n", timestamp, philo->id);
	pthread_mutex_unlock(&philo->table->can_print);
}

int	ft_usleep(size_t milliseconds)
{
	size_t	start;

	start = get_time();
	while ((get_time() - start) < milliseconds)
		usleep(100);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   args_validation.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mtarento <mtarento@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 21:06:36 by mtarento          #+#    #+#             */
/*   Updated: 2025/03/06 23:36:56 by mtarento         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

int	is_digit(char c)
{
	return (c >= '0' && c <= '9');
}

int	only_digit(char *av[])
{
	int	i;
	int	j;

	i = 1;
	j = 0;
	while (av[i])
	{
		j = 0;
		while (av[i][j])
		{
			if (!is_digit(av[i][j]))
				return (0);
			j++;
		}
		i++;
	}
	return (1);
}

int	check_args(int ac, char *av[])
{
	if (ac != 5 && ac != 6)
	{
		write(1, "wrong number of args\n", 21);
		return (1);
	}
	if (!only_digit(av))
	{
		printf("arguments must be only digits and positive\n");
		return (1);
	}
	if (ft_atoi(av[1]) <= 0 || ft_atoi(av[2]) <= 0
		|| ft_atoi(av[3]) <= 0 || ft_atoi(av[4]) <= 0)
	{
		printf("args at zero");
		return (1);
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mtarento <mtarento@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 00:44:06 by mtarento          #+#    #+#             */
/*   Updated: 2025/03/07 00:38:14 by mtarento         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

t_table	init_table(int ac, char *av[])
{
	t_table	table;	

	table.num_philos = ft_atoi(av[1]);
	table.time_to_die = ft_atoi(av[2]);
	table.time_to_eat = ft_atoi(av[3]);
	table.time_to_sleep = ft_atoi(av[4]);
	if (ac == 6)
		table.must_eat = ft_atoi(av[5]);
	else
		table.must_eat = -1;
	table.start_time = get_time();
	table.dead = 0;
	return (table);
}

void	init_mutex(t_table *table)
{
	int	i;

	table->forks = malloc(sizeof(pthread_mutex_t) * table->num_philos);
	table->philos = malloc(sizeof(t_philo) * table->num_philos);
	i = 0;
	while (i < table->num_philos)
	{
		pthread_mutex_init(&table->forks[i], NULL);
		pthread_mutex_init(&table->philos[i].meal_mutex, NULL);
		table->philos[i].id = i;
		table->philos[i].table = table;
		table->philos[i].last_meal = table->start_time;
		table->philos[i].meals_eaten = 0;
		table->philos[i].left_fork = &table->forks[i];
		table->philos[i].right_fork
			= &table->forks[(i + 1) % table->num_philos];
		i++;
	}
	pthread_mutex_init(&table->can_print, NULL);
	pthread_mutex_init(&table->finished_mutex, NULL);
	pthread_mutex_init(&table->is_dead, NULL);
}

void	destroy_mutex(t_table *table)
{
	int	i;

	i = 0;
	while (i < table->num_philos)
	{
		pthread_mutex_destroy(&table->forks[i]);
		pthread_mutex_destroy(&table->philos[i].meal_mutex);
		i++;
	}
	pthread_mutex_destroy(&table->can_print);
	pthread_mutex_destroy(&table->is_dead);
	pthread_mutex_destroy(&table->finished_mutex);
	free(table->forks);
	free(table->philos);
	return ;
}

void	create_threads(t_table *table)
{
	int	i;

	i = 0;
	while (i < table->num_philos)
	{
		if (pthread_create(&table->philos[i].thread, NULL,
				philosopher_routine, &table->philos[i]) != 0)
		{
			write(1, "failed creating thread\n", 23);
			return ;
		}
		i++;
	}
	start_monitoring(table);
	i = 0;
	while (i < table->num_philos)
	{
		pthread_join(table->philos[i].thread, NULL);
		i++;
	}
	pthread_join(table->monitor_thread, NULL);
}

int	main(int ac, char *av[])
{
	long	n;
	t_table	table;

	if (check_args(ac, av))
	{
		return (1);
	}
	if (ft_atoi(av[1]) == 1)
	{
		printf("0 Philosopher 0 has taken a fork\n");
		n = get_time();
		usleep(ft_atoi(av[2]) * 1000);
		printf("%ld Philosopher 0 has died \n", get_time() - n);
		return (0);
	}
	table = init_table(ac, av);
	init_mutex(&table);
	create_threads(&table);
	destroy_mutex(&table);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   monitoring.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mtarento <mtarento@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 04:43:09 by mtarento          #+#    #+#             */
/*   Updated: 2025/03/06 23:47:02 by mtarento         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

void	start_monitoring(t_table *table)
{
	if (pthread_create(&table->monitor_thread,
			NULL, monitor_routine, table) != 0)
	{
		write(1, "failed creating monitor thread\n", 32);
		exit(1);
	}
}

void	ft_grave(t_table *table, int id)
{
	pthread_mutex_lock(&table->is_dead);
	table->dead = 1;
	pthread_mutex_unlock(&table->is_dead);
	print_status(&table->philos[id], DEAD);
}

int	check_philosopher_death(t_table *table)
{
	int		i;
	long	time_since_last_meal;

	i = 0;
	while (i < table->num_philos)
	{
		pthread_mutex_lock(&table->philos[i].meal_mutex);
		time_since_last_meal = get_time() - table->philos[i].last_meal;
		pthread_mutex_unlock(&table->philos[i].meal_mutex);
		if (time_since_last_meal >= table->time_to_die)
		{
			ft_grave(table, i);
			return (1);
		}
		i++;
	}
	return (0);
}

int	are_you_done_yet(t_table *table)
{
	int	i;
	int	done_philo;

	i = 0;
	done_philo = 0;
	if (table->must_eat <= 0)
		return (0);
	while (i < table->num_philos)
	{
		pthread_mutex_lock(&table->philos[i].meal_mutex);
		if (table->philos[i].meals_eaten >= table->must_eat)
			done_philo++;
		pthread_mutex_unlock(&table->philos[i].meal_mutex);
		i++;
	}
	if (done_philo == table->num_philos)
	{
		pthread_mutex_lock(&table->is_dead);
		table->dead = 1;
		pthread_mutex_unlock(&table->is_dead);
		return (1);
	}
	return (0);
}

void	*monitor_routine(void *arg)
{
	t_table	*table;

	table = (t_table *)arg;
	while (1)
	{
		pthread_mutex_lock(&table->is_dead);
		if (table->dead)
		{
			pthread_mutex_unlock(&table->is_dead);
			return (NULL);
		}
		pthread_mutex_unlock(&table->is_dead);
		if (check_philosopher_death(table) || are_you_done_yet(table))
			return (NULL);
		ft_usleep(100);
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   philo_routine.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mtarento <mtarento@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/03 21:34:03 by mtarento          #+#    #+#             */
/*   Updated: 2025/03/06 23:35:34 by mtarento         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

void	take_forks(t_philo *philo)
{
	if (philo->id % 2 == 0)
	{
		ft_usleep(100);
		pthread_mutex_lock(philo->left_fork);
		print_status(philo, TAKEN_FORK);
		pthread_mutex_lock(philo->right_fork);
		print_status(philo, TAKEN_FORK);
	}
	else
	{
		pthread_mutex_lock(philo->right_fork);
		print_status(philo, TAKEN_FORK);
		pthread_mutex_lock(philo->left_fork);
		print_status(philo, TAKEN_FORK);
	}
}

void	release_forks(t_philo *philo)
{
	if (philo->id % 2 == 0)
	{
		pthread_mutex_unlock(philo->left_fork);
		pthread_mutex_unlock(philo->right_fork);
	}
	else
	{
		pthread_mutex_unlock(philo->right_fork);
		pthread_mutex_unlock(philo->left_fork);
	}
}

void	sleep_and_think(t_philo *philo)
{
	print_status(philo, SLEEPING);
	ft_usleep(philo->table->time_to_sleep);
	print_status(philo, THINKING);
}

void	eat(t_philo *philo)
{
	take_forks(philo);
	print_status(philo, EATING);
	pthread_mutex_lock(&philo->meal_mutex);
	philo->last_meal = get_time();
	philo->meals_eaten++;
	pthread_mutex_unlock(&philo->meal_mutex);
	ft_usleep(philo->table->time_to_eat);
	release_forks(philo);
}

void	*philosopher_routine(void *arg)
{
	t_philo	*philo;

	philo = (t_philo *)arg;
	while (1)
	{
		pthread_mutex_lock(&philo->table->is_dead);
		if (philo->table->dead)
		{
			pthread_mutex_unlock(&philo->table->is_dead);
			return (NULL);
		}
		pthread_mutex_unlock(&philo->table->is_dead);
		eat(philo);
		sleep_and_think(philo);
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   philo_utils.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mtarento <mtarento@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 00:59:30 by mtarento          #+#    #+#             */
/*   Updated: 2025/03/06 23:36:20 by mtarento         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

long	get_time(void)
{
	struct timeval	tv;

	gettimeofday(&tv, NULL);
	return (tv.tv_sec * 1000 + tv.tv_usec / 1000);
}

int	ft_atoi(char *str)
{
	int	sign;
	int	num;
	int	i;

	i = 0;
	sign = 1;
	num = 0;
	while (str[i] <= ' ')
		i++;
	if (str[i] == '-' || str[i] == '+')
	{
		if (str[i] == '-')
		{
			sign *= -1;
		}
		i++;
	}
	while (str[i] >= '0' && str[i] <= '9')
	{
		num = num * 10 + (str[i] - 48);
		i++;
	}
	return (num * sign);
}

void	print_status(t_philo *philo, t_action action)
{
	long	timestamp;	

	pthread_mutex_lock(&philo->table->is_dead);
	if (philo->table->dead && action != DEAD)
	{
		pthread_mutex_unlock(&philo->table->is_dead);
		return ;
	}
	pthread_mutex_unlock(&philo->table->is_dead);
	pthread_mutex_lock(&philo->table->can_print);
	timestamp = get_time() - philo->table->start_time;
	if (action == TAKEN_FORK)
		printf("%ld Philosopher %d has taken a fork\n", timestamp, philo->id);
	else if (action == EATING)
		printf("%ld Philosopher %d is eating\n", timestamp, philo->id);
	else if (action == SLEEPING)
		printf("%ld Philosopher %d is sleeping\n", timestamp, philo->id);
	else if (action == THINKING)
		printf("%ld Philosopher %d is thinking\n", timestamp, philo->id);
	else if (action == DEAD)
		printf("%ld Philosopher %d has died \n", timestamp, philo->id);
	pthread_mutex_unlock(&philo->table->can_print);
}

int	ft_usleep(size_t milliseconds)
{
	size_t	start;

	start = get_time();
	while ((get_time() - start) < milliseconds)
		usleep(100);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   args_validation.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mtarento <mtarento@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 21:06:36 by mtarento          #+#    #+#             */
/*   Updated: 2025/03/06 23:36:56 by mtarento         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

int	is_digit(char c)
{
	return (c >= '0' && c <= '9');
}

int	only_digit(char *av[])
{
	int	i;
	int	j;

	i = 1;
	j = 0;
	while (av[i])
	{
		j = 0;
		while (av[i][j])
		{
			if (!is_digit(av[i][j]))
				return (0);
			j++;
		}
		i++;
	}
	return (1);
}

int	check_args(int ac, char *av[])
{
	if (ac != 5 && ac != 6)
	{
		write(1, "wrong number of args\n", 21);
		return (1);
	}
	if (!only_digit(av))
	{
		printf("arguments must be only digits and positive\n");
		return (1);
	}
	if (ft_atoi(av[1]) <= 0 || ft_atoi(av[2]) <= 0
		|| ft_atoi(av[3]) <= 0 || ft_atoi(av[4]) <= 0)
	{
		printf("args at zero");
		return (1);
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mtarento <mtarento@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 00:44:06 by mtarento          #+#    #+#             */
/*   Updated: 2025/03/07 00:38:14 by mtarento         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

t_table	init_table(int ac, char *av[])
{
	t_table	table;	

	table.num_philos = ft_atoi(av[1]);
	table.time_to_die = ft_atoi(av[2]);
	table.time_to_eat = ft_atoi(av[3]);
	table.time_to_sleep = ft_atoi(av[4]);
	if (ac == 6)
		table.must_eat = ft_atoi(av[5]);
	else
		table.must_eat = -1;
	table.start_time = get_time();
	table.dead = 0;
	return (table);
}

void	init_mutex(t_table *table)
{
	int	i;

	table->forks = malloc(sizeof(pthread_mutex_t) * table->num_philos);
	table->philos = malloc(sizeof(t_philo) * table->num_philos);
	i = 0;
	while (i < table->num_philos)
	{
		pthread_mutex_init(&table->forks[i], NULL);
		pthread_mutex_init(&table->philos[i].meal_mutex, NULL);
		table->philos[i].id = i;
		table->philos[i].table = table;
		table->philos[i].last_meal = table->start_time;
		table->philos[i].meals_eaten = 0;
		table->philos[i].left_fork = &table->forks[i];
		table->philos[i].right_fork
			= &table->forks[(i + 1) % table->num_philos];
		i++;
	}
	pthread_mutex_init(&table->can_print, NULL);
	pthread_mutex_init(&table->finished_mutex, NULL);
	pthread_mutex_init(&table->is_dead, NULL);
}

void	destroy_mutex(t_table *table)
{
	int	i;

	i = 0;
	while (i < table->num_philos)
	{
		pthread_mutex_destroy(&table->forks[i]);
		pthread_mutex_destroy(&table->philos[i].meal_mutex);
		i++;
	}
	pthread_mutex_destroy(&table->can_print);
	pthread_mutex_destroy(&table->is_dead);
	pthread_mutex_destroy(&table->finished_mutex);
	free(table->forks);
	free(table->philos);
	return ;
}

void	create_threads(t_table *table)
{
	int	i;

	i = 0;
	while (i < table->num_philos)
	{
		if (pthread_create(&table->philos[i].thread, NULL,
				philosopher_routine, &table->philos[i]) != 0)
		{
			write(1, "failed creating thread\n", 23);
			return ;
		}
		i++;
	}
	start_monitoring(table);
	i = 0;
	while (i < table->num_philos)
	{
		pthread_join(table->philos[i].thread, NULL);
		i++;
	}
	pthread_join(table->monitor_thread, NULL);
}

int	main(int ac, char *av[])
{
	long	n;
	t_table	table;

	if (check_args(ac, av))
	{
		return (1);
	}
	if (ft_atoi(av[1]) == 1)
	{
		printf("0 Philosopher 0 has taken a fork\n");
		n = get_time();
		usleep(ft_atoi(av[2]) * 1000);
		printf("%ld Philosopher 0 has died \n", get_time() - n);
		return (0);
	}
	table = init_table(ac, av);
	init_mutex(&table);
	create_threads(&table);
	destroy_mutex(&table);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   monitoring.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mtarento <mtarento@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 04:43:09 by mtarento          #+#    #+#             */
/*   Updated: 2025/03/06 23:47:02 by mtarento         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

void	start_monitoring(t_table *table)
{
	if (pthread_create(&table->monitor_thread,
			NULL, monitor_routine, table) != 0)
	{
		write(1, "failed creating monitor thread\n", 32);
		exit(1);
	}
}

void	ft_grave(t_table *table, int id)
{
	pthread_mutex_lock(&table->is_dead);
	table->dead = 1;
	pthread_mutex_unlock(&table->is_dead);
	print_status(&table->philos[id], DEAD);
}

int	check_philosopher_death(t_table *table)
{
	int		i;
	long	time_since_last_meal;

	i = 0;
	while (i < table->num_philos)
	{
		pthread_mutex_lock(&table->philos[i].meal_mutex);
		time_since_last_meal = get_time() - table->philos[i].last_meal;
		pthread_mutex_unlock(&table->philos[i].meal_mutex);
		if (time_since_last_meal >= table->time_to_die)
		{
			ft_grave(table, i);
			return (1);
		}
		i++;
	}
	return (0);
}

int	are_you_done_yet(t_table *table)
{
	int	i;
	int	done_philo;

	i = 0;
	done_philo = 0;
	if (table->must_eat <= 0)
		return (0);
	while (i < table->num_philos)
	{
		pthread_mutex_lock(&table->philos[i].meal_mutex);
		if (table->philos[i].meals_eaten >= table->must_eat)
			done_philo++;
		pthread_mutex_unlock(&table->philos[i].meal_mutex);
		i++;
	}
	if (done_philo == table->num_philos)
	{
		pthread_mutex_lock(&table->is_dead);
		table->dead = 1;
		pthread_mutex_unlock(&table->is_dead);
		return (1);
	}
	return (0);
}

void	*monitor_routine(void *arg)
{
	t_table	*table;

	table = (t_table *)arg;
	while (1)
	{
		pthread_mutex_lock(&table->is_dead);
		if (table->dead)
		{
			pthread_mutex_unlock(&table->is_dead);
			return (NULL);
		}
		pthread_mutex_unlock(&table->is_dead);
		if (check_philosopher_death(table) || are_you_done_yet(table))
			return (NULL);
		ft_usleep(100);
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   philo_routine.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mtarento <mtarento@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/03 21:34:03 by mtarento          #+#    #+#             */
/*   Updated: 2025/03/06 23:35:34 by mtarento         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

void	take_forks(t_philo *philo)
{
	if (philo->id % 2 == 0)
	{
		ft_usleep(100);
		pthread_mutex_lock(philo->left_fork);
		print_status(philo, TAKEN_FORK);
		pthread_mutex_lock(philo->right_fork);
		print_status(philo, TAKEN_FORK);
	}
	else
	{
		pthread_mutex_lock(philo->right_fork);
		print_status(philo, TAKEN_FORK);
		pthread_mutex_lock(philo->left_fork);
		print_status(philo, TAKEN_FORK);
	}
}

void	release_forks(t_philo *philo)
{
	if (philo->id % 2 == 0)
	{
		pthread_mutex_unlock(philo->left_fork);
		pthread_mutex_unlock(philo->right_fork);
	}
	else
	{
		pthread_mutex_unlock(philo->right_fork);
		pthread_mutex_unlock(philo->left_fork);
	}
}

void	sleep_and_think(t_philo *philo)
{
	print_status(philo, SLEEPING);
	ft_usleep(philo->table->time_to_sleep);
	print_status(philo, THINKING);
}

void	eat(t_philo *philo)
{
	take_forks(philo);
	print_status(philo, EATING);
	pthread_mutex_lock(&philo->meal_mutex);
	philo->last_meal = get_time();
	philo->meals_eaten++;
	pthread_mutex_unlock(&philo->meal_mutex);
	ft_usleep(philo->table->time_to_eat);
	release_forks(philo);
}

void	*philosopher_routine(void *arg)
{
	t_philo	*philo;

	philo = (t_philo *)arg;
	while (1)
	{
		pthread_mutex_lock(&philo->table->is_dead);
		if (philo->table->dead)
		{
			pthread_mutex_unlock(&philo->table->is_dead);
			return (NULL);
		}
		pthread_mutex_unlock(&philo->table->is_dead);
		eat(philo);
		sleep_and_think(philo);
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   philo_utils.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mtarento <mtarento@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 00:59:30 by mtarento          #+#    #+#             */
/*   Updated: 2025/03/06 23:36:20 by mtarento         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

long	get_time(void)
{
	struct timeval	tv;

	gettimeofday(&tv, NULL);
	return (tv.tv_sec * 1000 + tv.tv_usec / 1000);
}

int	ft_atoi(char *str)
{
	int	sign;
	int	num;
	int	i;

	i = 0;
	sign = 1;
	num = 0;
	while (str[i] <= ' ')
		i++;
	if (str[i] == '-' || str[i] == '+')
	{
		if (str[i] == '-')
		{
			sign *= -1;
		}
		i++;
	}
	while (str[i] >= '0' && str[i] <= '9')
	{
		num = num * 10 + (str[i] - 48);
		i++;
	}
	return (num * sign);
}

void	print_status(t_philo *philo, t_action action)
{
	long	timestamp;	

	pthread_mutex_lock(&philo->table->is_dead);
	if (philo->table->dead && action != DEAD)
	{
		pthread_mutex_unlock(&philo->table->is_dead);
		return ;
	}
	pthread_mutex_unlock(&philo->table->is_dead);
	pthread_mutex_lock(&philo->table->can_print);
	timestamp = get_time() - philo->table->start_time;
	if (action == TAKEN_FORK)
		printf("%ld Philosopher %d has taken a fork\n", timestamp, philo->id);
	else if (action == EATING)
		printf("%ld Philosopher %d is eating\n", timestamp, philo->id);
	else if (action == SLEEPING)
		printf("%ld Philosopher %d is sleeping\n", timestamp, philo->id);
	else if (action == THINKING)
		printf("%ld Philosopher %d is thinking\n", timestamp, philo->id);
	else if (action == DEAD)
		printf("%ld Philosopher %d has died \n", timestamp, philo->id);
	pthread_mutex_unlock(&philo->table->can_print);
}

int	ft_usleep(size_t milliseconds)
{
	size_t	start;

	start = get_time();
	while ((get_time() - start) < milliseconds)
		usleep(100);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   args_validation.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mtarento <mtarento@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 21:06:36 by mtarento          #+#    #+#             */
/*   Updated: 2025/03/06 23:36:56 by mtarento         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

int	is_digit(char c)
{
	return (c >= '0' && c <= '9');
}

int	only_digit(char *av[])
{
	int	i;
	int	j;

	i = 1;
	j = 0;
	while (av[i])
	{
		j = 0;
		while (av[i][j])
		{
			if (!is_digit(av[i][j]))
				return (0);
			j++;
		}
		i++;
	}
	return (1);
}

int	check_args(int ac, char *av[])
{
	if (ac != 5 && ac != 6)
	{
		write(1, "wrong number of args\n", 21);
		return (1);
	}
	if (!only_digit(av))
	{
		printf("arguments must be only digits and positive\n");
		return (1);
	}
	if (ft_atoi(av[1]) <= 0 || ft_atoi(av[2]) <= 0
		|| ft_atoi(av[3]) <= 0 || ft_atoi(av[4]) <= 0)
	{
		printf("args at zero");
		return (1);
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mtarento <mtarento@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 00:44:06 by mtarento          #+#    #+#             */
/*   Updated: 2025/03/07 00:38:14 by mtarento         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

t_table	init_table(int ac, char *av[])
{
	t_table	table;	

	table.num_philos = ft_atoi(av[1]);
	table.time_to_die = ft_atoi(av[2]);
	table.time_to_eat = ft_atoi(av[3]);
	table.time_to_sleep = ft_atoi(av[4]);
	if (ac == 6)
		table.must_eat = ft_atoi(av[5]);
	else
		table.must_eat = -1;
	table.start_time = get_time();
	table.dead = 0;
	return (table);
}

void	init_mutex(t_table *table)
{
	int	i;

	table->forks = malloc(sizeof(pthread_mutex_t) * table->num_philos);
	table->philos = malloc(sizeof(t_philo) * table->num_philos);
	i = 0;
	while (i < table->num_philos)
	{
		pthread_mutex_init(&table->forks[i], NULL);
		pthread_mutex_init(&table->philos[i].meal_mutex, NULL);
		table->philos[i].id = i;
		table->philos[i].table = table;
		table->philos[i].last_meal = table->start_time;
		table->philos[i].meals_eaten = 0;
		table->philos[i].left_fork = &table->forks[i];
		table->philos[i].right_fork
			= &table->forks[(i + 1) % table->num_philos];
		i++;
	}
	pthread_mutex_init(&table->can_print, NULL);
	pthread_mutex_init(&table->finished_mutex, NULL);
	pthread_mutex_init(&table->is_dead, NULL);
}

void	destroy_mutex(t_table *table)
{
	int	i;

	i = 0;
	while (i < table->num_philos)
	{
		pthread_mutex_destroy(&table->forks[i]);
		pthread_mutex_destroy(&table->philos[i].meal_mutex);
		i++;
	}
	pthread_mutex_destroy(&table->can_print);
	pthread_mutex_destroy(&table->is_dead);
	pthread_mutex_destroy(&table->finished_mutex);
	free(table->forks);
	free(table->philos);
	return ;
}

void	create_threads(t_table *table)
{
	int	i;

	i = 0;
	while (i < table->num_philos)
	{
		if (pthread_create(&table->philos[i].thread, NULL,
				philosopher_routine, &table->philos[i]) != 0)
		{
			write(1, "failed creating thread\n", 23);
			return ;
		}
		i++;
	}
	start_monitoring(table);
	i = 0;
	while (i < table->num_philos)
	{
		pthread_join(table->philos[i].thread, NULL);
		i++;
	}
	pthread_join(table->monitor_thread, NULL);
}

int	main(int ac, char *av[])
{
	long	n;
	t_table	table;

	if (check_args(ac, av))
	{
		return (1);
	}
	if (ft_atoi(av[1]) == 1)
	{
		printf("0 Philosopher 0 has taken a fork\n");
		n = get_time();
		usleep(ft_atoi(av[2]) * 1000);
		printf("%ld Philosopher 0 has died \n", get_time() - n);
		return (0);
	}
	table = init_table(ac, av);
	init_mutex(&table);
	create_threads(&table);
	destroy_mutex(&table);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   monitoring.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mtarento <mtarento@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 04:43:09 by mtarento          #+#    #+#             */
/*   Updated: 2025/03/06 23:47:02 by mtarento         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

void	start_monitoring(t_table *table)
{
	if (pthread_create(&table->monitor_thread,
			NULL, monitor_routine, table) != 0)
	{
		write(1, "failed creating monitor thread\n", 32);
		exit(1);
	}
}

void	ft_grave(t_table *table, int id)
{
	pthread_mutex_lock(&table->is_dead);
	table->dead = 1;
	pthread_mutex_unlock(&table->is_dead);
	print_status(&table->philos[id], DEAD);
}

int	check_philosopher_death(t_table *table)
{
	int		i;
	long	time_since_last_meal;

	i = 0;
	while (i < table->num_philos)
	{
		pthread_mutex_lock(&table->philos[i].meal_mutex);
		time_since_last_meal = get_time() - table->philos[i].last_meal;
		pthread_mutex_unlock(&table->philos[i].meal_mutex);
		if (time_since_last_meal >= table->time_to_die)
		{
			ft_grave(table, i);
			return (1);
		}
		i++;
	}
	return (0);
}

int	are_you_done_yet(t_table *table)
{
	int	i;
	int	done_philo;

	i = 0;
	done_philo = 0;
	if (table->must_eat <= 0)
		return (0);
	while (i < table->num_philos)
	{
		pthread_mutex_lock(&table->philos[i].meal_mutex);
		if (table->philos[i].meals_eaten >= table->must_eat)
			done_philo++;
		pthread_mutex_unlock(&table->philos[i].meal_mutex);
		i++;
	}
	if (done_philo == table->num_philos)
	{
		pthread_mutex_lock(&table->is_dead);
		table->dead = 1;
		pthread_mutex_unlock(&table->is_dead);
		return (1);
	}
	return (0);
}

void	*monitor_routine(void *arg)
{
	t_table	*table;

	table = (t_table *)arg;
	while (1)
	{
		pthread_mutex_lock(&table->is_dead);
		if (table->dead)
		{
			pthread_mutex_unlock(&table->is_dead);
			return (NULL);
		}
		pthread_mutex_unlock(&table->is_dead);
		if (check_philosopher_death(table) || are_you_done_yet(table))
			return (NULL);
		ft_usleep(100);
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   philo_routine.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mtarento <mtarento@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/03 21:34:03 by mtarento          #+#    #+#             */
/*   Updated: 2025/03/06 23:35:34 by mtarento         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

void	take_forks(t_philo *philo)
{
	if (philo->id % 2 == 0)
	{
		ft_usleep(100);
		pthread_mutex_lock(philo->left_fork);
		print_status(philo, TAKEN_FORK);
		pthread_mutex_lock(philo->right_fork);
		print_status(philo, TAKEN_FORK);
	}
	else
	{
		pthread_mutex_lock(philo->right_fork);
		print_status(philo, TAKEN_FORK);
		pthread_mutex_lock(philo->left_fork);
		print_status(philo, TAKEN_FORK);
	}
}

void	release_forks(t_philo *philo)
{
	if (philo->id % 2 == 0)
	{
		pthread_mutex_unlock(philo->left_fork);
		pthread_mutex_unlock(philo->right_fork);
	}
	else
	{
		pthread_mutex_unlock(philo->right_fork);
		pthread_mutex_unlock(philo->left_fork);
	}
}

void	sleep_and_think(t_philo *philo)
{
	print_status(philo, SLEEPING);
	ft_usleep(philo->table->time_to_sleep);
	print_status(philo, THINKING);
}

void	eat(t_philo *philo)
{
	take_forks(philo);
	print_status(philo, EATING);
	pthread_mutex_lock(&philo->meal_mutex);
	philo->last_meal = get_time();
	philo->meals_eaten++;
	pthread_mutex_unlock(&philo->meal_mutex);
	ft_usleep(philo->table->time_to_eat);
	release_forks(philo);
}

void	*philosopher_routine(void *arg)
{
	t_philo	*philo;

	philo = (t_philo *)arg;
	while (1)
	{
		pthread_mutex_lock(&philo->table->is_dead);
		if (philo->table->dead)
		{
			pthread_mutex_unlock(&philo->table->is_dead);
			return (NULL);
		}
		pthread_mutex_unlock(&philo->table->is_dead);
		eat(philo);
		sleep_and_think(philo);
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   philo_utils.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mtarento <mtarento@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 00:59:30 by mtarento          #+#    #+#             */
/*   Updated: 2025/03/06 23:36:20 by mtarento         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

long	get_time(void)
{
	struct timeval	tv;

	gettimeofday(&tv, NULL);
	return (tv.tv_sec * 1000 + tv.tv_usec / 1000);
}

int	ft_atoi(char *str)
{
	int	sign;
	int	num;
	int	i;

	i = 0;
	sign = 1;
	num = 0;
	while (str[i] <= ' ')
		i++;
	if (str[i] == '-' || str[i] == '+')
	{
		if (str[i] == '-')
		{
			sign *= -1;
		}
		i++;
	}
	while (str[i] >= '0' && str[i] <= '9')
	{
		num = num * 10 + (str[i] - 48);
		i++;
	}
	return (num * sign);
}

void	print_status(t_philo *philo, t_action action)
{
	long	timestamp;	

	pthread_mutex_lock(&philo->table->is_dead);
	if (philo->table->dead && action != DEAD)
	{
		pthread_mutex_unlock(&philo->table->is_dead);
		return ;
	}
	pthread_mutex_unlock(&philo->table->is_dead);
	pthread_mutex_lock(&philo->table->can_print);
	timestamp = get_time() - philo->table->start_time;
	if (action == TAKEN_FORK)
		printf("%ld Philosopher %d has taken a fork\n", timestamp, philo->id);
	else if (action == EATING)
		printf("%ld Philosopher %d is eating\n", timestamp, philo->id);
	else if (action == SLEEPING)
		printf("%ld Philosopher %d is sleeping\n", timestamp, philo->id);
	else if (action == THINKING)
		printf("%ld Philosopher %d is thinking\n", timestamp, philo->id);
	else if (action == DEAD)
		printf("%ld Philosopher %d has died \n", timestamp, philo->id);
	pthread_mutex_unlock(&philo->table->can_print);
}

int	ft_usleep(size_t milliseconds)
{
	size_t	start;

	start = get_time();
	while ((get_time() - start) < milliseconds)
		usleep(100);
	return (0);
}
